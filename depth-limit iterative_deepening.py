# -*- coding: utf-8 -*-
"""Iterative Deepening and Depth Limited.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w1gt5KcBgtShlDac3UM4jWB_H1JSxP34
"""

# Define the map of Romania as an adjacency list
romania_map = {
    'Arad': {'Zerind': 75, 'Timisoara': 118, 'Sibiu': 140},
    'Zerind': {'Arad': 75, 'Oradea': 71},
    'Oradea': {'Zerind': 71, 'Sibiu': 151},
    'Timisoara': {'Arad': 118, 'Lugoj': 111},
    'Lugoj': {'Timisoara': 111, 'Mehadia': 70},
    'Mehadia': {'Lugoj': 70, 'Drobeta': 75},
    'Drobeta': {'Mehadia': 75, 'Craiova': 120},
    'Sibiu': {'Arad': 140, 'Oradea': 151, 'Fagaras': 99, 'Rimnicu Vilcea': 80},
    'Fagaras': {'Sibiu': 99, 'Bucharest': 211},
    'Rimnicu Vilcea': {'Sibiu': 80, 'Pitesti': 97, 'Craiova': 146},
    'Craiova': {'Drobeta': 120, 'Rimnicu Vilcea': 146, 'Pitesti': 138},
    'Pitesti': {'Rimnicu Vilcea': 97, 'Craiova': 138, 'Bucharest': 101},
    'Bucharest': {'Fagaras': 211, 'Pitesti': 101, 'Giurgiu': 90, 'Urziceni': 85},
    'Giurgiu': {'Bucharest': 90},
    'Urziceni': {'Bucharest': 85, 'Vaslui': 142, 'Hirsova': 98},
    'Hirsova': {'Urziceni': 98, 'Eforie': 86},
    'Eforie': {'Hirsova': 86},
    'Vaslui': {'Urziceni': 142, 'Iasi': 92},
    'Iasi': {'Vaslui': 92, 'Neamt': 87},
    'Neamt': {'Iasi': 87}
}

# Function to perform Iterative Deepening Search


def iterative_deepening_search(start, goal, max_depth):
    for depth in range(max_depth):
        result = depth_limited_search(start, goal, depth)
        if result is not None:
            return result
    return None

# Helper function for depth-limited search


def depth_limited_search(node, goal, depth_limit):
    return recursive_dls(node, goal, depth_limit)

# Recursive Depth-Limited Search


def recursive_dls(node, goal, depth_limit):
    if node == goal:
        return [node]
    if depth_limit == 0:
        return None
    if node not in romania_map:
        return None

    for neighbor in romania_map[node]:
        result = recursive_dls(neighbor, goal, depth_limit - 1)
        if result is not None:
            return [node] + result

    return None


def print_explored_states(path):
    if path is None:
        print("No path found.")
    else:
        print("States explored:")
        for state in path:
            print(state)


# Example usage:
start_city = 'Arad'
goal_city = 'Bucharest'
max_depth_limit = 20  # Set a maximum depth limit

path = iterative_deepening_search(start_city, goal_city, max_depth_limit)

if path is None:
    print(
        f"No path found between {start_city} and {goal_city} within depth limit {max_depth_limit}")
else:
    print(f"Path found: {' -> '.join(path)}")


print_explored_states(path)

# Define the map of Romania as an adjacency list
romania_map = {
    'Arad': {'Zerind': 75, 'Timisoara': 118, 'Sibiu': 140},
    'Zerind': {'Arad': 75, 'Oradea': 71},
    'Oradea': {'Zerind': 71, 'Sibiu': 151},
    'Timisoara': {'Arad': 118, 'Lugoj': 111},
    'Lugoj': {'Timisoara': 111, 'Mehadia': 70},
    'Mehadia': {'Lugoj': 70, 'Drobeta': 75},
    'Drobeta': {'Mehadia': 75, 'Craiova': 120},
    'Sibiu': {'Arad': 140, 'Oradea': 151, 'Fagaras': 99, 'Rimnicu Vilcea': 80},
    'Fagaras': {'Sibiu': 99, 'Bucharest': 211},
    'Rimnicu Vilcea': {'Sibiu': 80, 'Pitesti': 97, 'Craiova': 146},
    'Craiova': {'Drobeta': 120, 'Rimnicu Vilcea': 146, 'Pitesti': 138},
    'Pitesti': {'Rimnicu Vilcea': 97, 'Craiova': 138, 'Bucharest': 101},
    'Bucharest': {'Fagaras': 211, 'Pitesti': 101, 'Giurgiu': 90, 'Urziceni': 85},
    'Giurgiu': {'Bucharest': 90},
    'Urziceni': {'Bucharest': 85, 'Vaslui': 142, 'Hirsova': 98},
    'Hirsova': {'Urziceni': 98, 'Eforie': 86},
    'Eforie': {'Hirsova': 86},
    'Vaslui': {'Urziceni': 142, 'Iasi': 92},
    'Iasi': {'Vaslui': 92, 'Neamt': 87},
    'Neamt': {'Iasi': 87}
}

# Depth-Limited Search function


def depth_limited_search(node, goal, depth_limit, visited=None):
    if visited is None:
        visited = set()
    visited.add(node)

    if node == goal:
        return [node]

    if depth_limit == 0:
        return None

    if node not in romania_map:
        return None

    for neighbor in romania_map[node]:
        if neighbor not in visited:
            result = depth_limited_search(
                neighbor, goal, depth_limit - 1, visited)
            if result is not None:
                return [node] + result

    return None

# Function to print the path from start to goal


def print_path(path):
    if path is None:
        print("No path found.")
    else:
        print("Path found:")
        print(" -> ".join(path))


def print_explored_states(path):
    if path is None:
        print("No path found.")
    else:
        print("States explored:")
        for state in path:
            print(state)


# Example usage:
start_city = 'Arad'
goal_city = 'Bucharest'
depth_limit = 10  # Set the depth limit

# Perform Depth-Limited Search
path = depth_limited_search(start_city, goal_city, depth_limit)

# Print the path found (if any)
print_path(path)
print_explored_states(path)
